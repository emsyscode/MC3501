/****************************************************/
/* This is only one example of code structure       */
/* OFFCOURSE this code can be optimized, but        */
/* the idea is let it so simple to be easy catch    */
/* where we can do changes and look to the results  */
/* Keep in mind the code is not clean!              */
/****************************************************/

#define VFD_data 7// If 0 write LCD, if 1 read of LCD
#define VFD_clk 8 // if 0 is a command, if 1 is a data0
#define VFD_ce 9 // Must be pulsed to LCD fetch data of bus
#define vfdLED 10 //Only to controle LED 301

/*Global Variables Declarations*/
#define BUTTON_PIN 3 //Att check wich pins accept interrupts... Uno is 2 & 3
volatile byte buttonReleased = false;
bool status = false;
// variables will change:
int buttonState = 0;  // variable for reading the pushbutton status
unsigned char grid;
/*
unsigned int segMC3501L[] ={
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//bar in middle(center)
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//bar
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//bar
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//left grid
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//DSP 1
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//DSP 2
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//DSP 3
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//DSP 4
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//DSP 5
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//DSP 6
            (0b00000000), (0b00100000), (0b00000000), // The third byte is only half byte of third byte.//DSP 7  // this have the point active in front of display 7
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//DSP 8
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//dsp small
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.//right grid
            (0b00000000), (0b00000000), (0b00000000), // The third byte is only half byte of third byte.
            (0b00000000), (0b00000000), (0b00000000)  // The third byte is only half byte of third byte.
};
*/
//The next lines is the numbers and letters construction following the 
//segments 14 rules. a,b,c,d,e,f,g,h,i,j,k,l,m. Note the segment "g" is 
//applied two times.
//                          ggcemlid       ahjkbf
unsigned char number0[]={(0b00110001),(0b00100011),(0b00000000)}; // 0
unsigned char number1[]={(0b00100000),(0b00000010),(0b00000000)}; // 1
unsigned char number2[]={(0b11010001),(0b00100010),(0b00000000)}; // 2
unsigned char number3[]={(0b11100001),(0b00100010),(0b00000000)}; // 3
unsigned char number4[]={(0b11100000),(0b00000011),(0b00000000)}; // 4
unsigned char number5[]={(0b11100001),(0b00100001),(0b00000000)}; // 5
unsigned char number6[]={(0b11110001),(0b00100001),(0b00000000)}; // 6
unsigned char number7[]={(0b00100000),(0b00100010),(0b00000000)}; // 7
unsigned char number8[]={(0b11110001),(0b00100001),(0b00000000)}; // 8
unsigned char number9[]={(0b11100001),(0b00100011),(0b00000000)}; // 9

//                          ggcemlid       ahjkbf
unsigned char letterA[]={(0b11110000),(0b00100011),(0b00000000)}; // A
unsigned char letterB[]={(0b01100011),(0b00110010),(0b00000000)}; // B
unsigned char letterC[]={(0b00010001),(0b00100001),(0b00000000)}; // C
unsigned char letterD[]={(0b00100011),(0b00110010),(0b00000000)}; // D
unsigned char letterE[]={(0b10010001),(0b00100001),(0b00000000)}; // E
unsigned char letterF[]={(0b10010000),(0b00100001),(0b00000000)}; // F
unsigned char letterG[]={(0b01110001),(0b00100001),(0b00000000)}; // G
unsigned char letterH[]={(0b11110000),(0b00000011),(0b00000000)}; // H
unsigned char letterI[]={(0b00000011),(0b00110000),(0b00000000)}; // I
unsigned char letterJ[]={(0b00110001),(0b00000010),(0b00000000)}; // J
unsigned char letterK[]={(0b10010100),(0b00000101),(0b00000000)}; // k
unsigned char letterL[]={(0b00010001),(0b00000001),(0b00000000)}; // L
unsigned char letterM[]={(0b00110000),(0b00001111),(0b00000000)}; // M
unsigned char letterN[]={(0b00110100),(0b00001011),(0b00000000)}; // N
unsigned char letterO[]={(0b00110001),(0b00100011),(0b00000000)}; // O
unsigned char letterP[]={(0b11010000),(0b00100011),(0b00000000)}; // P
unsigned char letterQ[]={(0b00110101),(0b00100011),(0b00000000)}; // Q
unsigned char letterR[]={(0b11010100),(0b00100011),(0b00000000)}; // R
unsigned char letterS[]={(0b11100001),(0b00100001),(0b00000000)}; // S
unsigned char letterT[]={(0b00000010),(0b00110000),(0b00000000)}; // T
unsigned char letterU[]={(0b00110001),(0b00000011),(0b00000000)}; // U
unsigned char letterV[]={(0b00011000),(0b00000101),(0b00000000)}; // V
unsigned char letterX[]={(0b00001100),(0b00001100),(0b00000000)}; // X
unsigned char letterY[]={(0b00000010),(0b00001100),(0b00000000)}; // Y
unsigned char letterZ[]={(0b00001001),(0b00100100),(0b00000000)}; // Z
unsigned char letterW[]={(0b00111100),(0b00000011),(0b00000000)}; // W
unsigned char letterSpace[]={(0b0000000),(0b00000000),(0b00000000)}; // Space
//
unsigned char segFind[]={(0b11111111),(0b11111111),(0b11111111)}; // Only to test

unsigned int segments[] ={ // Draw numbers to the display of 7 segments
  //This not respect the normal table for 7segm like "abcdefgh"  // 
      0b01110111, //0  // 
      0b00010010, //1  // 
      0b01101011, //2  // 
      0b01011011, //3  // 
      0b00011110, //4  // 
      0b01011101, //5  // 
      0b01111101, //6  // 
      0b00010011, //7  // 
      0b01111111, //8  // 
      0b00011111, //9  // 
      0b00000000, //10 // empty display
  };
/*****************************************************************/
void MC3501L_init(void){
  delayMicroseconds(200); //power_up delay
  // Note: Allways the first byte in the input data after the STB go to LOW is interpret as command!!!

  // Configure VFD display (grids)
  cmd_with_stb(0b00001110);//     cmd1 15 Grids and 24 segments! 
  delayMicroseconds(1);
  cmd_with_stb((0b10001000) | 7); // IMPORTANT:  After define the size GRIDs is necessary do a cmd "ON" display.
  delayMicroseconds(1);
  // turn vfd on, stop key scannig
   cmd_with_stb(0b10001000);//(BIN(01100110)); 
  delayMicroseconds(1);
  // Write to memory display, increment address, normal operation
  cmd_with_stb(0b01000000);//(BIN(01000000));
  delayMicroseconds(1);
  // Address 00H - 15H ( total of 11*2Bytes=176 Bits)
  cmd_with_stb(0b11000000);//(BIN(01100110)); 
  delayMicroseconds(1);
  // set DIMM/PWM to value
  cmd_with_stb((0b10001000) | 7);//0 min - 7 max  )(0b01010000)
  delayMicroseconds(1);
}
/*****************************************************************/
void send_char(unsigned char grid, unsigned char byte0, unsigned char byte1,unsigned char byte2){
 
        cmd_with_stb(0b00001110); //       cmd 1 // 10 Grids & 24 Segments
        delayMicroseconds(2);
        cmd_with_stb((0b10001000) | 7); // IMPORTANT:  After define the size GRIDs is necessary do a cmd "ON" display.
        delayMicroseconds(2);
        cmd_with_stb(0b01000000); //       cmd 2 //Normal operation; Auto increment
        digitalWrite(VFD_ce, LOW);
        delayMicroseconds(2);
            cmd_without_stb((0b11000000) | grid); // cmd 3 //wich define the start address (00H to 15H)
            cmd_without_stb(byte0); // Data to fill table of 5 grids * 16 segm = 80 bits on the table
            cmd_without_stb(byte1); // Data to fill table of 5 grids * 16 segm = 80 bits on the table
            cmd_without_stb(byte2); // only half byte of third byte.
            //
            digitalWrite(VFD_ce, HIGH);
            delayMicroseconds(2);
             /*
            Serial.println("******************");  // only to debug on the console print
            Serial.println(((0b11000000) | grid), BIN);
            Serial.println("------------------");
            Serial.println(grid, BIN);//
            Serial.println(byte0, BIN);//
            Serial.println(byte1, BIN);//
            Serial.println(byte2, BIN);
            Serial.println("++++++++++++++++++");
            */
            delay(200); //To write slowly, char by char at VFD
}
/*****************************************************************/
void cmd_without_stb(unsigned char a){
  // send without stb
  unsigned char transmit = 7; //define our transmit pin
  unsigned char data = 170; //value to transmit, binary 10101010
  unsigned char mask = 1; //our bitmask
  
  data=a;
  //This don't send the strobe signal, to be used in burst data send
   for (mask = 00000001; mask>0; mask <<= 1) { //iterate through bit mask
     digitalWrite(VFD_clk, LOW);
     if (data & mask){ // if bitwise AND resolves to true
        digitalWrite(VFD_data, HIGH);
     }
     else{ //if bitwise and resolves to false
       digitalWrite(VFD_data, LOW);
     }
    delayMicroseconds(5);
    digitalWrite(VFD_clk, HIGH);
    delayMicroseconds(5);
   }
   //digitalWrite(VFD_clk, LOW);
}
/****************************************************************/
void cmd_with_stb(unsigned char a){
  // send with stb
  unsigned char transmit = 7; //define our transmit pin
  unsigned char data = 170; //value to transmit, binary 10101010
  unsigned char mask = 1; //our bitmask
  
  data=a;
  
  //This send the strobe signal
  //Note: The first byte input at in after the STB go LOW is interpreted as a command!!!
  digitalWrite(VFD_ce, LOW);
  delayMicroseconds(1);
   for (mask = 00000001; mask>0; mask <<= 1) { //iterate through bit mask
     digitalWrite(VFD_clk, LOW);
     delayMicroseconds(1);
     if (data & mask){ // if bitwise AND resolves to true
        digitalWrite(VFD_data, HIGH);
     }
     else{ //if bitwise and resolves to false
       digitalWrite(VFD_data, LOW);
     }
    digitalWrite(VFD_clk, HIGH);
    delayMicroseconds(1);
   }
   digitalWrite(VFD_ce, HIGH);
   delayMicroseconds(1);
}
/****************************************************************/
void test_VFD(void){
  clear_VFD();
      
      digitalWrite(VFD_ce, LOW);
      delayMicroseconds(1);
      cmd_with_stb(0b00001110); // cmd 1 // 10 Grids & 24 Segments
      cmd_with_stb((0b10001000) | 7); // IMPORTANT:  After define the size GRIDs is necessary do a cmd "ON" display.
      cmd_with_stb(0b01000000); // cmd 2 //Write VFD, Normal operation; Set pulse as 1/16, Auto increment
      cmd_with_stb(0b10001000 | 0x07); // cmd 2 //set on, dimmer to max
        digitalWrite(VFD_ce, LOW);
        delayMicroseconds(1);
        cmd_without_stb((0b11000000)); //cmd 3 wich define the start address (00H to 15H)
        // Only here must change the bit to test, first 2 bytes and 1/2 byte of third.
         for (int i = 0; i < 10 ; i++){ // test base to 10 grids and 24 segm
          // Zone of test, if write 1 on any position of 3 bytes below position, will bright segment corresponding it.
         cmd_without_stb(0b00000000); // Data to fill table 5*16 = 80 bits
         cmd_without_stb(0b00000000); // Data to fill table 5*16 = 80 bits
         cmd_without_stb(0b00000000); // Data to fill table 5*16 = 80 bits
         }
    
      //cmd_without_stb(0b00000001); // cmd1 Here I define the 5 grids and 16 Segments
      //cmd_with_stb((0b10001000) | 7); //cmd 4
      digitalWrite(VFD_ce, HIGH);
      delay(1);
      delay(3000);  
}
/****************************************************************/
void clear_VFD(void){
  int sum=0;
  /*
  Here I clean all registers 
  Could be done only on the number of grid
  to be more fast. The 12 * 3 bytes = 36 registers
  */
      for (int n=0; n < 16; n++){  //
        cmd_with_stb(0b00001110); //       cmd 1 // 10 Grids & 24 Segments
        delayMicroseconds(1);
        cmd_with_stb((0b10001000) | 7); // IMPORTANT:  After define the size GRIDs is necessary do a cmd "ON" display.
        delayMicroseconds(1);
        cmd_with_stb(0b01000000); //       cmd 2 //Normal operation; Set pulse as 1/16
        digitalWrite(VFD_ce, LOW);
        delayMicroseconds(1);
            cmd_without_stb((0b11000000) | sum); // cmd 3 //wich define the start address (00H to 15H)
            cmd_without_stb(0b00000000); // Data to fill table of 5 grids * 16 segm = 80 bits on the table
            cmd_without_stb(0b00000000); // Data to fill table of 5 grids * 16 segm = 80 bits on the table
            cmd_without_stb(0b00000000); // only half byte of third byte.
            //
            digitalWrite(VFD_ce, HIGH);
            delayMicroseconds(2);
            sum=(sum +3);
     }
}
/****************************************************************/
void seg(void){
  int sum=0;
  /*
  Here I test all registers 
  Could be done only on the number of grid
  to be more fast. The 15 * 3 bytes = 45 registers
  */
      for (int n=0; n < 16; n++){  //
        cmd_with_stb(0b00001110); //       cmd 1 // 14 Grids & 14 Segments
        delayMicroseconds(1);
        cmd_with_stb((0b10001000) | 7); // IMPORTANT:  After define the size GRIDs is necessary execute a cmd "ON" display.
        delayMicroseconds(1);
        cmd_with_stb(0b01000000); //       cmd 2 //Normal operation; Set pulse as 1/16
        digitalWrite(VFD_ce, LOW);
        delayMicroseconds(1);
            cmd_without_stb((0b11000000)); // Start address 00;
            //                ggcemlid                       ahjkbf
            cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); // .// GRID top Left
            cmd_without_stb(0b11111111); cmd_without_stb(0b11111111); cmd_without_stb(0b00001111); // .// GRID top wave left
            cmd_without_stb(0b11111111); cmd_without_stb(0b11111111); cmd_without_stb(0b00001111); // .// GRID top wave right
            cmd_without_stb(0b11111111); cmd_without_stb(0b11111111); cmd_without_stb(0b00001111); // .// GRID top, second from right
            cmd_without_stb(0b11111111); cmd_without_stb(0b11111111); cmd_without_stb(0b11111111); // .// GRID top and down total at right.
            cmd_without_stb(0b11111111); cmd_without_stb(0b00111111); cmd_without_stb(0b00000000); // .//DSP 1
            cmd_without_stb(0b00000000); cmd_without_stb(0b00010000); cmd_without_stb(0b00000000); // .//DSP 2
            cmd_without_stb(0b00000000); cmd_without_stb(0b00010000); cmd_without_stb(0b00000000); // .//DSP 3
            cmd_without_stb(0b00000000); cmd_without_stb(0b00010000); cmd_without_stb(0b00000000); // .//DSP 4
            cmd_without_stb(0b00000000); cmd_without_stb(0b00010000); cmd_without_stb(0b00000000); // .//DSP 5
            cmd_without_stb(0b00000000); cmd_without_stb(0b00110000); cmd_without_stb(0b00000000); // .//DSP 6
            cmd_without_stb(0b00000000); cmd_without_stb(0b00100000); cmd_without_stb(0b00000000); // .//DSP 7
            cmd_without_stb(0b00000000); cmd_without_stb(0b00100000); cmd_without_stb(0b00000000); // .//DSP 8
            cmd_without_stb(0b00000000); cmd_without_stb(0b00100000); cmd_without_stb(0b00000000); // .//DSP 9
            cmd_without_stb(0b00000000); cmd_without_stb(0b00100000); cmd_without_stb(0b00000000); // .//DSP 10
            cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); // 
            //
            digitalWrite(VFD_ce, HIGH);
            delayMicroseconds(3000);
            Serial.println(((0b11000000) | sum), BIN);
     }
}
void wavesAllOn(void){
  int sum=0;
  /*
  Here I test all registers 
  Could be done only on the number of grid
  to be more fast. The 15 * 3 bytes = 45 registers
  */
      for (int n=0; n < 3; n++){  //
        cmd_with_stb(0b00001110); //       cmd 1 // 14 Grids & 14 Segments
        delayMicroseconds(1);
        cmd_with_stb((0b10001000) | 7); // IMPORTANT:  After define the size GRIDs is necessary execute a cmd "ON" display.
        delayMicroseconds(1);
        cmd_with_stb(0b01000000); //       cmd 2 //Normal operation; Set pulse as 1/16
        digitalWrite(VFD_ce, LOW);
        delayMicroseconds(1);
            cmd_without_stb((0b11000000)); // Start address 00;
            //                ggcemlid                       ahjkbf
            cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); // .// GRID top Left
            cmd_without_stb(0b11111111); cmd_without_stb(0b11111111); cmd_without_stb(0b00001111); // .// GRID top wave left
            cmd_without_stb(0b11111111); cmd_without_stb(0b11111111); cmd_without_stb(0b00001111); // .// GRID top wave right
            cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); // .// GRID top, second from right
            cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); // .// GRID top and down total at right.
            //
            digitalWrite(VFD_ce, HIGH);
            delayMicroseconds(30);
            Serial.println(((0b11000000) | sum), BIN);
     delay(300);
     clear_VFD();
     delay(200);
     }
     
}
void wavesAnime(byte wL1, byte wL2, byte wL3, byte wR1, byte wR2, byte wR3){
  int sum=0;
  /*
  Here I test all registers 
  Could be done only on the number of grid
  to be more fast. The 15 * 3 bytes = 45 registers
  */
      for (int n=0; n < 16; n++){  //
        cmd_with_stb(0b00001110); //       cmd 1 // 14 Grids & 14 Segments
        delayMicroseconds(1);
        cmd_with_stb((0b10001000) | 7); // IMPORTANT:  After define the size GRIDs is necessary execute a cmd "ON" display.
        delayMicroseconds(1);
        cmd_with_stb(0b01000000); //       cmd 2 //Normal operation; Set pulse as 1/16
        digitalWrite(VFD_ce, LOW);
        delayMicroseconds(1);
            cmd_without_stb((0b11000000)); // Start address 00;
            //                ggcemlid                       ahjkbf
            cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); // .// GRID top Left
            cmd_without_stb(wL1); cmd_without_stb(wL2); cmd_without_stb(wL3); // .// GRID top wave left
            cmd_without_stb(wR1); cmd_without_stb(wR2); cmd_without_stb(wR3); // .// GRID top wave right
            cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); // .// GRID top, second from right
            cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); cmd_without_stb(0b00000000); // .// GRID top and down total at right.
            //
            digitalWrite(VFD_ce, HIGH);
            delayMicroseconds(3000);
            Serial.println(((0b11000000) | sum), BIN);
     }
}
/****************************************************************/

void waves(void){
  uint8_t wL1 = 0b00001000; //First three bits (0~2), are not used! Bit 3 is the top and bottom bars of left wave.
uint8_t wL2 = 0b01010101;
uint8_t wL3 = 0b11110000; //Even is blue, Odd is Yellow, Last four bits are not used!
uint8_t wR1 = 0b00001000; //First three bits (0~2), are not used! Bit 3 is the top and bottom bars of right wave.
uint8_t wR2 = 0b01010101;
uint8_t wR3 = 0b11110000; //Even is blue, Odd is Yellow, Last four bits are not used!
for(uint8_t i = 0; i < 33; i++){
switch (i) {
  case 0: wL1 = 0b00001000; wL2 = 0b01010101; wL3 = 0b00000000; //This case is a blue format equalizer "V"
          wR1 = 0b00001000; wR2 = 0b01010101; wR3 = 0b00000000; break;

  case 1: wL1 = 0b01011000; wL2 = 0b01010101; wL3 = 0b00000101; //This case is all blue bright
          wR1 = 0b01011000; wR2 = 0b01010101; wR3 = 0b00000101; break;

  case 2: wL1 = 0b01011000; wL2 = 0b00000101; wL3 = 0b00000000; //This case is a all top blue bright
          wR1 = 0b01011000; wR2 = 0b00000101; wR3 = 0b00000000; break;

  case 3: wL1 = 0b00001000; wL2 = 0b01010000; wL3 = 0b00000101; //This case is all bottom blue bright
          wR1 = 0b00001000; wR2 = 0b01010000; wR3 = 0b00000101; break;        

  case 4: wL1 = 0b00001000; wL2 = 0b10101010; wL3 = 0b00000000; //This case is a yellow format equalizer "V"
          wR1 = 0b00001000; wR2 = 0b10101010; wR3 = 0b00000000; break;

  case 5: wL1 = 0b10101000; wL2 = 0b10101010; wL3 = 0b00001010; //This case is all yellow bright
          wR1 = 0b10101000; wR2 = 0b10101010; wR3 = 0b00001010; break;

  case 6: wL1 = 0b10101000; wL2 = 0b00001010; wL3 = 0b00000000; //This case is all top yellow bright
          wR1 = 0b10101000; wR2 = 0b00001010; wR3 = 0b00000000; break;

  case 7: wL1 = 0b00001000; wL2 = 0b10100000; wL3 = 0b00001010; //This case is all yellow bottom brigth
          wR1 = 0b00001000; wR2 = 0b10100000; wR3 = 0b00001010; break;
//                abcdefgh          ijklmnop          qrstuvxz  
  case 8: wL1 = 0b01011000; wL2 = 0b00000101; wL3 = 0b00000000; //This case is all bottom blue bright
          wR1 = 0b01011000; wR2 = 0b00000101; wR3 = 0b00000000; break; 
  
  case 9: wL1 = 0b00001000; wL2 = 0b00010000; wL3 = 0b00000000; //bottom blue left
          wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;   

  case 10: wL1 = 0b00001000; wL2 = 0b01000000; wL3 = 0b00000000; //bottom blue left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;  

  case 11: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000001; //bottom blue left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;  

  case 12: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000100; //bottom blue left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break; 

   case 13: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //bottom blue right
            wR1 = 0b00001000; wR2 = 0b00010000; wR3 = 0b00000000; break;   

  case 14: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //bottom blue right
           wR1 = 0b00001000; wR2 = 0b01000000; wR3 = 0b00000000; break;  

  case 15: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //bottom blue right
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000001; break;  

  case 16: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //bottom blue right
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000100; break;          
                                                           
  //Yellow bottom
  case 17: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //bottom yellow left
           wR1 = 0b00001000; wR2 = 0b00100000; wR3 = 0b00000000; break;   

  case 18: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //bottom yellow left
           wR1 = 0b00001000; wR2 = 0b10000000; wR3 = 0b00000000; break;  

  case 19: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //bottom yellow left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000010; break;  

  case 20: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //bottom yellow left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00001000; break;          

  case 21: wL1 = 0b00001000; wL2 = 0b00100000; wL3 = 0b00000000; //bottom yellow right
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;   

  case 22: wL1 = 0b00001000; wL2 = 0b10000000; wL3 = 0b00000000; //bottom yellow right
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;  

  case 23: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000010; //bottom yellow right
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;  

  case 24: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00001000; //bottom yellow right
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break; 

  //Yellow top     abcdefgh          ijklmnop          qrstuvxz 
  case 25: wL1 = 0b00101000; wL2 = 0b00000000; wL3 = 0b00000000; //top yellow left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;   

  case 26: wL1 = 0b10001000; wL2 = 0b00000000; wL3 = 0b00000000; //top yellow left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;  

  case 27: wL1 = 0b00001000; wL2 = 0b00000010; wL3 = 0b00000000; //top yellow left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;  

  case 28: wL1 = 0b00001000; wL2 = 0b00001000; wL3 = 0b00000000; //top yellow left
           wR1 = 0b00001000; wR2 = 0b00000000; wR3 = 0b00000000; break;          

  case 29: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //top yellow right
           wR1 = 0b00101000; wR2 = 0b00000000; wR3 = 0b00000000; break;   

  case 30: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //top yellow right
           wR1 = 0b10001000; wR2 = 0b00000000; wR3 = 0b00000000; break;  

  case 31: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //top yellow right
           wR1 = 0b00001000; wR2 = 0b00000010; wR3 = 0b00000000; break;  

  case 32: wL1 = 0b00001000; wL2 = 0b00000000; wL3 = 0b00000000; //top yellow right
           wR1 = 0b00001000; wR2 = 0b00001000; wR3 = 0b00000000; break;                                                                                               
}
wavesAnime(wL1, wL2, wL3, wR1, wR2, wR3);
delay(100);
}
}

void all_ON(void){
  int sum=0;
  /*
  Here I test all registers 
  Could be done only on the number of grid
  to be more fast. The 12 * 3 bytes = 36 registers
  */
      for (int n=0; n < 16; n++){  //
        cmd_with_stb(0b00001110); //       cmd 1 // 14 Grids & 14 Segments
        delayMicroseconds(1);
        cmd_with_stb((0b10001000) | 7); // IMPORTANT:  After define the size GRIDs is necessary do a cmd "ON" display.
        delayMicroseconds(1);
        cmd_with_stb(0b01000000); //       cmd 2 //Normal operation; Set pulse as 1/16
        digitalWrite(VFD_ce, LOW);
        delayMicroseconds(1);
            cmd_without_stb((0b11000000) | sum); // cmd 3 //wich define the start address (00H to 15H)
            cmd_without_stb(0b11111111); // Data to fill table of 5 grids * 16 segm = 80 bits on the table
            cmd_without_stb(0b11111111); // Data to fill table of 5 grids * 16 segm = 80 bits on the table
            cmd_without_stb(0b11111111); // Data to fill table of 5 grids * 16 segm = 80 bits on the table
            //
            digitalWrite(VFD_ce, HIGH);
            delayMicroseconds(3000);
            Serial.println(((0b11000000) | sum), BIN);
            sum=(sum +3);
     }
}

void numbersLetters(void){
// Zone to test the numbers and letters
send_char(0x0F,number0[0], number0[1], number0[2]);
send_char(0x12,number1[0], number1[1], number1[2]);
send_char(0x15,number2[0], number2[1], number2[2]);
send_char(0x18,number3[0], number3[1], number3[2]);
send_char(0x1B,number4[0], number4[1], number4[2]);
send_char(0x1E,number5[0], number5[1], number5[2]);
send_char(0x21,number6[0], number6[1], number6[2]);
send_char(0x24,number7[0], number7[1], number7[2]);
send_char(0x27,number8[0], number8[1], number8[2]);
send_char(0x2A,number9[0], number9[1], number9[2]);
clear_VFD();
send_char(0x0F,letterA[0], letterA[1], letterA[2]);
send_char(0x12,letterB[0], letterB[1], letterB[2]);
send_char(0x15,letterC[0], letterC[1], letterC[2]);
send_char(0x18,letterD[0], letterD[1], letterD[2]);
send_char(0x1B,letterE[0], letterE[1], letterE[2]);
send_char(0x1E,letterF[0], letterF[1], letterF[2]);
send_char(0x21,letterG[0], letterG[1], letterG[2]);
send_char(0x24,letterH[0], letterH[1], letterH[2]);
send_char(0x27,letterI[0], letterI[1], letterI[2]);
send_char(0x2A,letterJ[0], letterJ[1], letterJ[2]);
clear_VFD();
send_char(0x0F,letterK[0], letterK[1], letterK[2]);
send_char(0x12,letterL[0], letterL[1], letterL[2]);
send_char(0x15,letterM[0], letterM[1], letterM[2]);
send_char(0x18,letterN[0], letterN[1], letterN[2]);
send_char(0x1B,letterO[0], letterO[1], letterO[2]);
send_char(0x1E,letterP[0], letterP[1], letterP[2]);
send_char(0x21,letterQ[0], letterQ[1], letterQ[2]);
send_char(0x24,letterR[0], letterR[1], letterR[2]);
send_char(0x27,letterS[0], letterS[1], letterS[2]);
send_char(0x2A,letterT[0], letterT[1], letterT[2]);
clear_VFD();
send_char(0x0F,letterU[0], letterU[1], letterU[2]);
send_char(0x12,letterV[0], letterV[1], letterV[2]);
send_char(0x15,letterX[0], letterX[1], letterX[2]);
send_char(0x18,letterZ[0], letterZ[1], letterZ[2]);
send_char(0x1B,letterW[0], letterW[1], letterW[2]);
clear_VFD(); 
}
void msgHiFolks(void){
clear_VFD();
send_char(0x0F,letterH[0], letterH[1], letterH[2]);
send_char(0x12,letterI[0], letterI[1], letterI[2]);
send_char(0x15, letterSpace[0], letterSpace[1], letterSpace[2]);
send_char(0x18,letterF[0], letterF[1], letterF[2]);
send_char(0x1B,letterO[0], letterO[1], letterO[2]);
send_char(0x1E,letterL[0], letterL[1], letterL[2]);
send_char(0x21,letterK[0], letterK[1], letterK[2]);
send_char(0x24,letterS[0], letterS[1], letterS[2]);
}
void msgHiGuys(void){
clear_VFD();
send_char(0x0F,letterH[0], letterH[1], letterH[2]);
send_char(0x12,letterI[0], letterI[1], letterI[2]);
send_char(0x15, letterSpace[0], letterSpace[1], letterSpace[2]);
send_char(0x18,letterG[0], letterG[1], letterG[2]);
send_char(0x1B,letterU[0], letterU[1], letterU[2]);
send_char(0x1E,letterY[0], letterY[1], letterY[2]);
send_char(0x21,letterS[0], letterS[1], letterS[2]);
}
void msgHiPeople(void){
clear_VFD();
send_char(0x0F,letterH[0], letterH[1], letterH[2]);
send_char(0x12,letterI[0], letterI[1], letterI[2]);
send_char(0x15, letterSpace[0], letterSpace[1], letterSpace[2]);
send_char(0x18,letterP[0], letterP[1], letterP[2]);
send_char(0x1B,letterE[0], letterE[1], letterE[2]);
send_char(0x1E,letterO[0], letterO[1], letterO[2]);
send_char(0x21,letterP[0], letterP[1], letterP[2]);
send_char(0x24,letterL[0], letterL[1], letterL[2]);
send_char(0x27,letterE[0], letterE[1], letterE[2]);
}

void setup() {
pinMode(LED_BUILTIN, OUTPUT);
Serial.begin (115200);
//
pinMode(7, OUTPUT);
pinMode(8, OUTPUT);
pinMode(9, OUTPUT);
pinMode(10, OUTPUT);
digitalWrite(10, LOW);

pinMode(BUTTON_PIN, INPUT_PULLUP);

// LOW to trigger the interrupt whenever the pin is low,
// CHANGE to trigger the interrupt whenever the pin changes value
// RISING to trigger when the pin goes from low to high,
// FALLING for when the pin goes from high to low.
 attachInterrupt(digitalPinToInterrupt(BUTTON_PIN),
                  buttonReleasedInterrupt,
                  FALLING);

MC3501L_init();
//
test_VFD();
//
clear_VFD();
//

}

void loop() { 
    for(uint8_t s = 0x00; s < 3; s++){
    digitalWrite(10, LOW); 
    delay(750);
    digitalWrite(10, HIGH);
    delay(750);
    }
    while(1){
    all_ON();
    delay(3000);
    clear_VFD();

    msgHiFolks();
    delay(1000);
    // 
    msgHiGuys();
    delay(1000);
    //
    msgHiPeople();
    delay(1000);
    //
    numbersLetters();
    //
    clear_VFD();
    wavesAllOn();
    waves();
    }
}
void buttonReleasedInterrupt() {
  status = digitalRead(vfdLED);
  delayMicroseconds(5);
  digitalWrite(vfdLED, !status);
}
